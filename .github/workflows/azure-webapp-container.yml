name: Build and Deploy to Azure Container App

on:
  push:
    branches: [ "main"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  REGISTRY: ${{ secrets.DOCKERHUB_REGISTRY }}
  IMAGE_NAME: ${{ secrets.DOCKERHUB_IMAGE }}
  CONTAINER_APP_NAME: ${{ vars.AZURE_CONTAINER_APP_NAME }}
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push multi-platform Docker image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $REGISTRY/$IMAGE_NAME:latest \
            --push \
            .

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Delete existing ACI (if existing)
        run: |
          az container delete --resource-group $RESOURCE_GROUP --name $CONTAINER_APP_NAME --yes || true
      
      - name: Deploy to Azure Container Instance (ACI)
        run: |
          az container create \
            --name $CONTAINER_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $IMAGE_NAME:latest \
            --os-type Linux \
            --cpu 0.5 \
            --memory 0.5 \
            --port 80 \
            --ip-address Public \
            --dns-name-label onlincecv \
            --environment-variables \
            COSMOS_CONNECTION_STRING=${{ secrets.COSMOS_CONNECTION_STRING }} \
            COSMOS_DATABASE=${{ secrets.COSMOS_DATABASE }} \
            COSMOS_CONTAINER=${{ secrets.COSMOS_CONTAINER }} \
            HOST=0.0.0.0 \
            PORT=80 \
            --restart-policy OnFailure