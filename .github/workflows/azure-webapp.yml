# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Create an Azure AD App Registration and configure OpenID Connect
# 2. Create the required GitHub repository secrets
# 3. Change the value for the AZURE_WEBAPP_NAME and other environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main", "50-publish-the-project-on-az-webapp-dynamic-app" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: ${{ vars.AZURE_WEBAPP_NAME }}
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  NODE_VERSION: ${{ vars.NODE_VERSION }}

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies and build
      run: |
        pnpm install
        pnpm build
      env:
        COSMOS_ENDPOINT: ${{ secrets.COSMOS_ENDPOINT }}
        COSMOS_KEY: ${{ secrets.COSMOS_KEY }}
        COSMOS_DATABASE: ${{ secrets.COSMOS_DATABASE }}
        COSMOS_CONTAINER: ${{ secrets.COSMOS_CONTAINER }}

    - name: Create deployment package
      run: |
        # Create a deployment directory
        mkdir -p deployment
        # Copy essential files for Azure Web App
        cp package.json deployment/
        cp next.config.js deployment/
        cp pnpm-lock.yaml deployment/
        cp server.js deployment/
        cp -r .next deployment/
        cp -r public deployment/
        cp -r app deployment/

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: deployment

  deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: Login to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}